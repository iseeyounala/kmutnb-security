{"ast":null,"code":"var _jsxFileName = \"/Users/wongsatornboonpeng/Desktop/kmutnb-security/src/GoogleMapCom.js\",\n  _s = $RefreshSig$();\nimport { GoogleMap, InfoWindowF, MarkerF, InfoWindow, Marker, LoadScript } from \"@react-google-maps/api\";\nimport React, { useEffect, useState } from \"react\";\n// import ImageTask from \"./ImageTask\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst logo = require(\"./image/bus.png\");\nlet lastPosition, lastTime;\nlet isRunning = false;\nfunction GoogleMapCom(_ref) {\n  _s();\n  let {\n    tasks\n  } = _ref;\n  const [dataCar, setDataCar] = useState([]);\n  const getDataLocationCar = () => {\n    axios.post(\"http://192.168.1.5:3001/web/user/getLocationCar\", {}).then(res => {\n      let {\n        status,\n        result\n      } = res.data;\n      console.log(res.data);\n      status && setDataCar(result);\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getDataLocationCar();\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  function calcDistance(pos1, pos2) {\n    const R = 6371e3; // radius of Earth in meters\n    const lat1 = pos1.lat * (Math.PI / 180);\n    const lat2 = pos2.lat * (Math.PI / 180);\n    const deltaLat = (pos2.lat - pos1.lat) * (Math.PI / 180);\n    const deltaLng = (pos2.lng - pos1.lng) * (Math.PI / 180);\n    const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(deltaLng / 2) * Math.sin(deltaLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c;\n    return distance;\n  }\n  const handlePositionUpdate = (latitude, longitude) => {\n    const currentTime = Date.now();\n    const currentLocation = {\n      lat: latitude,\n      lng: longitude\n    };\n    if (lastPosition) {\n      const distance = calcDistance(lastPosition, currentLocation);\n      const timeDiff = (currentTime - lastTime) / 1000; // convert to seconds\n      const speed = distance / timeDiff; // in meters per second\n\n      if (speed > 10) {\n        console.log(\"Car is running\");\n        return isRunning = true;\n      } else {\n        console.log(\"Car is not running\");\n        return isRunning = false;\n      }\n    }\n    lastPosition = currentLocation;\n    lastTime = currentTime;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"AIzaSyBHBTkH9fICG5hTL1xNFkyLXaQGyZU6fek\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        options: {\n          streetViewControl: true,\n          zoom: 15,\n          center: {\n            lat: 14.162782696749133,\n            lng: 101.35487649815568\n          }\n        },\n        mapContainerStyle: {\n          width: \"100vw\",\n          height: \"100vh\"\n        },\n        children: dataCar.map((val, idx) => {\n          return /*#__PURE__*/_jsxDEV(MarkerF, {\n            position: {\n              lat: val.driver_lat,\n              lng: val.driver_long\n            },\n            icon: {\n              url: `${logo}`,\n              scaledSize: {\n                width: 72,\n                height: 72\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(InfoWindow, {\n              position: {\n                lat: val.driver_lat,\n                lng: val.driver_long\n              },\n              children: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [handlePositionUpdate(val.driver_lat, val.driver_long) == true && /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: \"black\"\n                  },\n                  children: \"\\u0E01\\u0E33\\u0E25\\u0E31\\u0E07\\u0E27\\u0E34\\u0E48\\u0E07\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 23\n                }, this), handlePositionUpdate(val.driver_lat, val.driver_long) == false && /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: \"black\"\n                  },\n                  children: \"\\u0E08\\u0E2D\\u0E14\\u0E2D\\u0E22\\u0E39\\u0E48\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(GoogleMapCom, \"APzcgwrUJktVuprHjUHt21ub7Gg=\");\n_c = GoogleMapCom;\nexport default GoogleMapCom;\nvar _c;\n$RefreshReg$(_c, \"GoogleMapCom\");","map":{"version":3,"names":["GoogleMap","InfoWindowF","MarkerF","InfoWindow","Marker","LoadScript","React","useEffect","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","logo","require","lastPosition","lastTime","isRunning","GoogleMapCom","_ref","_s","tasks","dataCar","setDataCar","getDataLocationCar","post","then","res","status","result","data","console","log","catch","err","error","interval","setInterval","clearInterval","calcDistance","pos1","pos2","R","lat1","lat","Math","PI","lat2","deltaLat","deltaLng","lng","a","sin","cos","c","atan2","sqrt","distance","handlePositionUpdate","latitude","longitude","currentTime","Date","now","currentLocation","timeDiff","speed","children","googleMapsApiKey","options","streetViewControl","zoom","center","mapContainerStyle","width","height","map","val","idx","position","driver_lat","driver_long","icon","url","scaledSize","style","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wongsatornboonpeng/Desktop/kmutnb-security/src/GoogleMapCom.js"],"sourcesContent":["import {\n  GoogleMap,\n  InfoWindowF,\n  MarkerF,\n  InfoWindow,\n  Marker,\n  LoadScript,\n} from \"@react-google-maps/api\";\nimport React, { useEffect, useState } from \"react\";\n// import ImageTask from \"./ImageTask\";\nimport axios from \"axios\";\n\nconst logo = require(\"./image/bus.png\");\n\nlet lastPosition, lastTime;\nlet isRunning = false;\n\nfunction GoogleMapCom({ tasks }) {\n  const [dataCar, setDataCar] = useState([]);\n\n  const getDataLocationCar = () => {\n    axios\n      .post(\"http://192.168.1.5:3001/web/user/getLocationCar\", {})\n      .then((res) => {\n        let { status, result } = res.data;\n        console.log(res.data);\n        status && setDataCar(result);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getDataLocationCar();\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n\n  function calcDistance(pos1, pos2) {\n    const R = 6371e3; // radius of Earth in meters\n    const lat1 = pos1.lat * (Math.PI / 180);\n    const lat2 = pos2.lat * (Math.PI / 180);\n    const deltaLat = (pos2.lat - pos1.lat) * (Math.PI / 180);\n    const deltaLng = (pos2.lng - pos1.lng) * (Math.PI / 180);\n\n    const a =\n      Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\n      Math.cos(lat1) *\n        Math.cos(lat2) *\n        Math.sin(deltaLng / 2) *\n        Math.sin(deltaLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    const distance = R * c;\n    return distance;\n  }\n\n  const handlePositionUpdate = (latitude, longitude) => {\n    const currentTime = Date.now();\n    const currentLocation = {\n      lat: latitude,\n      lng: longitude,\n    };\n\n    if (lastPosition) {\n      const distance = calcDistance(lastPosition, currentLocation);\n      const timeDiff = (currentTime - lastTime) / 1000; // convert to seconds\n      const speed = distance / timeDiff; // in meters per second\n\n      if (speed > 10) {\n        console.log(\"Car is running\");\n        return isRunning = true;\n      } else {\n        console.log(\"Car is not running\");\n        return isRunning = false;\n      }\n    }\n\n    lastPosition = currentLocation;\n    lastTime = currentTime;\n  };\n\n  return (\n    <>\n      <LoadScript googleMapsApiKey=\"AIzaSyBHBTkH9fICG5hTL1xNFkyLXaQGyZU6fek\">\n        <GoogleMap\n          options={{\n            streetViewControl: true,\n            zoom: 15,\n            center: { lat: 14.162782696749133, lng: 101.35487649815568 },\n          }}\n          mapContainerStyle={{ width: \"100vw\", height: \"100vh\" }}\n        >\n          {dataCar.map((val, idx) => {\n            return (\n              <MarkerF\n                key={idx}\n                position={{ lat: val.driver_lat, lng: val.driver_long }}\n                icon={{ url: `${logo}`, scaledSize: { width: 72, height: 72 } }}\n              >\n                <InfoWindow\n                  position={{ lat: val.driver_lat, lng: val.driver_long }}\n                >\n                  <>\n                    {handlePositionUpdate(val.driver_lat, val.driver_long) == true && (\n                      <div style={{ color: \"black\" }}>กำลังวิ่ง</div>\n                    )}\n                    {handlePositionUpdate(val.driver_lat, val.driver_long) == false && (\n                      <div style={{ color: \"black\" }}>จอดอยู่</div>\n                    )}\n                  </>\n                </InfoWindow>\n              </MarkerF>\n            );\n          })}\n        </GoogleMap>\n      </LoadScript>\n    </>\n  );\n}\n\nexport default GoogleMapCom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}